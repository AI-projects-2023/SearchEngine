text
"def add(a, b):
    return a + b"
"def sub(a, b):
    return a - b"
"def mul(a, b):
    return a * b"
"def div(a, b):
    return a / b"
"def mod(a, b):
    return a % b"
"def pow(a, b):
    return a ** b"
"def lshift(a, b):
    return a << b"
"def rshift(a, b):
    return a >> b"
"def and(a, b):
    return a & b"
"def xor(a, b):
    return a ^ b"
"def or(a, b):
    return a | b"
"def floordiv(a, b):
    return a // b"
"def truediv(a, b):
    return a / b"
"def neg(a):
    return -a"
"def reverse_string(s):
    return s[::-1]"
"def reverse_list(l):
    return l[::-1]"
"def reverse_tuple(t):
    return t[::-1]"
"def reverse_dict(d):
    return {v: k for k, v in d.items()}"
"def reverse_set(s):
    return {v for v in s}"
"def reverse_range(r):
    return range(r.stop, r.start, r.step)"
"def reverse_enumerate(e):
    return enumerate(e, 1)"
"def factorial(n):
    return 1 if n == 0 else n * factorial(n - 1)"
"def is_even(n):
    return n % 2 == 0"
"def is_odd(n):
    return n % 2 == 1"
"def is_prime(n):
    return n > 1 and all(n % i for i in range(2, int(n ** 0.5) + 1))"
"def is_palindrome(s):
    return s == s[::-1]"
"def is_sorted(l):
    return all(l[i] <= l[i + 1] for i in range(len(l) - 1))"
"def is_reversed(l):
    return all(l[i] >= l[i + 1] for i in range(len(l) - 1))"
"def is_increasing(l):
    return all(l[i] < l[i + 1] for i in range(len(l) - 1))"
"def is_decreasing(l):
    return all(l[i] > l[i + 1] for i in range(len(l) - 1))"
"def is_unique(l):
    return len(l) == len(set(l))"
"def is_empty(l):
    return len(l) == 0"
"def is_not_empty(l):
    return len(l) > 0"
"def is_none(x):
    return x is None"
"def is_not_none(x):
    return x is not None"
"def fibonacci(n):
    a, b = 0, 1
    while a < n:
        print(a, end=' ')
        a, b = b, a + b
    print()"
"def is_leap_year(year):
    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)"
"def is_power_of_two(n):
    return n > 0 and (n & (n - 1)) == 0"
"def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True"
"def is_armstrong(n):
    return n == sum(int(d)**len(str(n)) for d in str(n))"
"def is_perfect(n):
    return n == sum(i for i in range(1, n) if n % i == 0)"
"def is_abundant(n):
    return n < sum(i for i in range(1, n) if n % i == 0)"
"def is_deficient(n):
    return n > sum(i for i in range(1, n) if n % i == 0)"
"def is_perfect_square(n):
    return n > 0 and int(n**0.5)**2 == n"
"def is_perfect_cube(n):
    return n > 0 and int(n**(1/3))**(3) == n"
"def sum_of_digits(n):
    return sum(map(int, str(n)))"
"def convert_to_ascii(s):
    return [ord(c) for c in s]"
"def convert_to_string(l):
    return ''.join(map(chr, l))"
"def convert_to_list(s):   
    return list(s)"
"def convert_to_tuple(s):
    return tuple(s)"
"def convert_to_set(s):
    return set(s)"
"def convert_to_dict(l):
    return dict(l)"
"def convert_to_int(s):
    return int(s)"
"def convert_to_float(s):
    return float(s)"
"def convert_to_bool(s):
    return bool(s)"
"def convert_to_complex(s):
    return complex(s)"
"def convert_to_hex(n):
    return hex(n)"
"def convert_to_oct(n):
    return oct(n)"
"def convert_to_bin(n):
    return bin(n)"
"def convert_to_base(n, base):
    return int(str(n), base)"
"def convert_to_decimal(n, base):
    return int(str(n), base)"